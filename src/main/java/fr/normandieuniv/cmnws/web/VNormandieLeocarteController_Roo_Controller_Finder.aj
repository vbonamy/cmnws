// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.normandieuniv.cmnws.web;

import fr.normandieuniv.cmnws.db.VNormandieLeocarte;
import fr.normandieuniv.cmnws.web.VNormandieLeocarteController;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

privileged aspect VNormandieLeocarteController_Roo_Controller_Finder {
    
    @RequestMapping(params = { "find=ByAnneeUniversitaireEquals", "form" }, method = RequestMethod.GET)
    public String VNormandieLeocarteController.findVNormandieLeocartesByAnneeUniversitaireEqualsForm(Model uiModel) {
        return "vnormandieleocarte/findVNormandieLeocartesByAnneeUniversitaireEquals";
    }
    
    @RequestMapping(params = "find=ByAnneeUniversitaireEquals", method = RequestMethod.GET)
    public String VNormandieLeocarteController.findVNormandieLeocartesByAnneeUniversitaireEquals(@RequestParam("anneeUniversitaire") String anneeUniversitaire, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("vnormandieleocartes", VNormandieLeocarte.findVNormandieLeocartesByAnneeUniversitaireEquals(anneeUniversitaire, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) VNormandieLeocarte.countFindVNormandieLeocartesByAnneeUniversitaireEquals(anneeUniversitaire) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("vnormandieleocartes", VNormandieLeocarte.findVNormandieLeocartesByAnneeUniversitaireEquals(anneeUniversitaire, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "vnormandieleocarte/list";
    }
    
    @RequestMapping(params = { "find=ByAnneeUniversitaireEqualsAndEppnEquals", "form" }, method = RequestMethod.GET)
    public String VNormandieLeocarteController.findVNormandieLeocartesByAnneeUniversitaireEqualsAndEppnEqualsForm(Model uiModel) {
        return "vnormandieleocarte/findVNormandieLeocartesByAnneeUniversitaireEqualsAndEppnEquals";
    }
    
    @RequestMapping(params = "find=ByAnneeUniversitaireEqualsAndEppnEquals", method = RequestMethod.GET)
    public String VNormandieLeocarteController.findVNormandieLeocartesByAnneeUniversitaireEqualsAndEppnEquals(@RequestParam("anneeUniversitaire") String anneeUniversitaire, @RequestParam("eppn") String eppn, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("vnormandieleocartes", VNormandieLeocarte.findVNormandieLeocartesByAnneeUniversitaireEqualsAndEppnEquals(anneeUniversitaire, eppn, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) VNormandieLeocarte.countFindVNormandieLeocartesByAnneeUniversitaireEqualsAndEppnEquals(anneeUniversitaire, eppn) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("vnormandieleocartes", VNormandieLeocarte.findVNormandieLeocartesByAnneeUniversitaireEqualsAndEppnEquals(anneeUniversitaire, eppn, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "vnormandieleocarte/list";
    }
    
    @RequestMapping(params = { "find=ByAnneeUniversitaireEqualsAndEppnEqualsAndNomSurCarteLike", "form" }, method = RequestMethod.GET)
    public String VNormandieLeocarteController.findVNormandieLeocartesByAnneeUniversitaireEqualsAndEppnEqualsAndNomSurCarteLikeForm(Model uiModel) {
        return "vnormandieleocarte/findVNormandieLeocartesByAnneeUniversitaireEqualsAndEppnEqualsAndNomSurCarteLike";
    }
    
    @RequestMapping(params = "find=ByAnneeUniversitaireEqualsAndEppnEqualsAndNomSurCarteLike", method = RequestMethod.GET)
    public String VNormandieLeocarteController.findVNormandieLeocartesByAnneeUniversitaireEqualsAndEppnEqualsAndNomSurCarteLike(@RequestParam("anneeUniversitaire") String anneeUniversitaire, @RequestParam("eppn") String eppn, @RequestParam("nomSurCarte") String nomSurCarte, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("vnormandieleocartes", VNormandieLeocarte.findVNormandieLeocartesByAnneeUniversitaireEqualsAndEppnEqualsAndNomSurCarteLike(anneeUniversitaire, eppn, nomSurCarte, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) VNormandieLeocarte.countFindVNormandieLeocartesByAnneeUniversitaireEqualsAndEppnEqualsAndNomSurCarteLike(anneeUniversitaire, eppn, nomSurCarte) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("vnormandieleocartes", VNormandieLeocarte.findVNormandieLeocartesByAnneeUniversitaireEqualsAndEppnEqualsAndNomSurCarteLike(anneeUniversitaire, eppn, nomSurCarte, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "vnormandieleocarte/list";
    }
    
    @RequestMapping(params = { "find=ByAnneeUniversitaireEqualsAndNomSurCarteLike", "form" }, method = RequestMethod.GET)
    public String VNormandieLeocarteController.findVNormandieLeocartesByAnneeUniversitaireEqualsAndNomSurCarteLikeForm(Model uiModel) {
        return "vnormandieleocarte/findVNormandieLeocartesByAnneeUniversitaireEqualsAndNomSurCarteLike";
    }
    
    @RequestMapping(params = "find=ByAnneeUniversitaireEqualsAndNomSurCarteLike", method = RequestMethod.GET)
    public String VNormandieLeocarteController.findVNormandieLeocartesByAnneeUniversitaireEqualsAndNomSurCarteLike(@RequestParam("anneeUniversitaire") String anneeUniversitaire, @RequestParam("nomSurCarte") String nomSurCarte, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("vnormandieleocartes", VNormandieLeocarte.findVNormandieLeocartesByAnneeUniversitaireEqualsAndNomSurCarteLike(anneeUniversitaire, nomSurCarte, sortFieldName, sortOrder).setFirstResult(firstResult).setMaxResults(sizeNo).getResultList());
            float nrOfPages = (float) VNormandieLeocarte.countFindVNormandieLeocartesByAnneeUniversitaireEqualsAndNomSurCarteLike(anneeUniversitaire, nomSurCarte) / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("vnormandieleocartes", VNormandieLeocarte.findVNormandieLeocartesByAnneeUniversitaireEqualsAndNomSurCarteLike(anneeUniversitaire, nomSurCarte, sortFieldName, sortOrder).getResultList());
        }
        addDateTimeFormatPatterns(uiModel);
        return "vnormandieleocarte/list";
    }
    
}
